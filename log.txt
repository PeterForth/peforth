
peforth

[x] 13:59 2017-07-31 找到 JavaScript eval() equivalent in Python
	https://stackoverflow.com/questions/701802/how-do-i-execute-a-string-containing-python-code-in-python
	成功了!!
	>>> mycode = 'print ("hello world")'
	>>> exec(mycode)
	hello world
	>>>

	The technique of returning a function from another function is known as currying:
	https://stackoverflow.com/questions/14261474/how-do-i-write-a-function-that-returns-another-function
	
	Python annoymous function lambda
	http://blog.csdn.net/majianfei1023/article/details/45269343
	https://www.zhihu.com/question/20125256
	
[x] review project-k , should project-k support python too? 
    which will be peforth.py 	

[x] 直接問 pyforth 的原作者的版權條件 ---> 用不著了.
[x] 實驗用 exec() 生成一個 function
		s = ''' 
		def show(s):
			print(s)
		'''
	exec(s)
	>>> show('abc')
	abc
	>>> 成功了!
	
[x]	Try to define an python object
	s = '''
	class a():
		vm = None
		def b(self):  # self is must
			print(b)  # b unknown
			print(self)
			print(a)
			vm = self
	c = a()
	'''
	exec(s)
[x] peforth 可以引用的讀檔範例
    # average5 .py 
    def main() : 
        fileName = input ("What file are the numbers in? " ) 
        infile = open (fileName, ' r ') 
        sum = 0 
        count = 0 
        for line in infile:
            sum = sum + eval (line) 
            count = count + 1 
        print ("\nThe average Of the numbers is", sum / count) 
    main ( ) 

    # average6.py 
    def main() : 
    fileName = input ("What file are the numbers in? " ) 
    infile = open ( fileName 
    sum = 0.0 
    count = 0 
    line = infile.readline()
    while line != "" 
        sum = sum + eval(line) 
        count = count + 1 
        line = infile.readline()
    print("\nThe average Of the numbers is", sum / count) 
    main()

[x] module 的用法搞懂了，很簡單。 peforth.py 就是 peforth VM.
    不需要像 javascript 用一個 function 把整個 vm 包起來, see 
    GitHub\peforth\projectile.py 
    python can redefine functions and methods. Function and methods are
    variables too.
    python objects, like javascript, can add properties and methods
    through simply assign a value to it.
        >>> type(show)  # show is an object
        <class 'projectile.Projectile'>
        >>> show
        <projectile.Projectile object at 0x000001C6260D0438>
        >>> show.x = 0   # assign new property to show
        >>> show.y = 11
        >>> show.p = 22
        >>> dir(show)    # check it out
        ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', 
        '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', 
        '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', 
        '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', 
        '__str__', '__subclasshook__', '__weakref__', 'getHere', 'getX', 'getY', 'p', 
        'update', 'x', 'xpos', 'xvel', 'y', 'ypos', 'yvel']
        >>>
[x] python 也可以 see function 的 source code
    https://stackoverflow.com/questions/427453/how-can-i-get-the-source-code-of-a-python-function
    
    def foo(a):
    x = 2 # how about a comment?
    return x + a

    import inspect

    # inspect.getsource(foo)
    # u'def foo(a):\n    x = 2\n    return x + a\n'

    print (inspect.getsource(foo))
    ==> 結果完全成功, 連 comment 也被顯示出來。
    ==> 但是 py> py: 組合出來的 function 不行
            py> tick('test').cfa ==> 1
            py> dictionary[1:] ==> [.s, <function <lambda> at 0x0000024CE15810D0>, 
            .s, <function <lambda> at 0x0000024CE1581158>, .s, None, None]
            OK py> inspect.getsource(dictionary[2]) .
            could not get source code  <------------------- error message
            Debug? [y/N]
    
    同一篇 stackoverflow 介紹的 dis module 也真的可行!
    >>> import dis
    >>> def func(x):
    ...     print(x+1)
    ...
    >>> func(123)
    124
    >>> dis.dis(func)
      2           0 LOAD_GLOBAL              0 (print)
                  2 LOAD_FAST                0 (x)
                  4 LOAD_CONST               1 (1)
                  6 BINARY_ADD
                  8 CALL_FUNCTION            1
                 10 POP_TOP
                 12 LOAD_CONST               0 (None)
                 14 RETURN_VALUE
    >>>    哇! 顯示出 function 的機械碼, 太正點了!! 
    
[x] Python equivalent of:
    Word.prototype.toString = function(){return this.name + " " + this.help}; // every word introduces itself
    --> 有了, 就是去定義 __str__ prototype of the class

    #------- ex2.py ---------------
    class d():
        def __str__(self):
            return "a __str__"
        def __repr__(self):
            return "a __repr__"

    class x():
        name = 'stella'
        feet = 'splender'
    #------------------------------

    >>> import ex2
    >>> x = ex2.x()
    >>> x
    <ex2.x object at 0x00000170D77202B0>  <---- default __repr__ 打印
    >>> print(x)
    <ex2.x object at 0x00000170D77202B0> <---- default __str__ 傳回值

    >>> d = ex2.d()
    >>> d   # <--------- 執行該 obj 時, 打印 __repr__() 的傳回值
    a __repr__         # 應該讓它執行該 word
    >>> print(d)  # <---- obj 本身的傳回值是 __str__() 的傳回值
    a __str__
    >>>    
    
[x] 進一步刺探未來的 peforth.py kernel module 的特性   
    Ynote: 搞懂 python 的 module files globals() locals().note   

[x] docode() 要組裝 function 需參考 anonymous function 的定義方法:
    https://stackoverflow.com/questions/6629876/how-to-make-an-anonymous-function-in-python-without-christening-it
    Study built-in function exec() https://docs.python.org/3/library/functions.html#exec    
    Study build-in function compile() https://docs.python.org/3/library/functions.html#compile
    [x] genxt() 成功了
[x] IDLE path working directory working folder
    import sys
    sys.path.append('c:/Users/hcche/Documents/GitHub/peforth')
[x] 12:50 2017/08/12 已經跑起來了, debugging compiling == 'code' 的問題
    --> 可能是 end-code 裡面 Word(newname,newxt) 失敗的關係 --> no, it can't fail
    --> 應該是 docode 裡面, 結構不太好, 萬一 reDef 或 genxt() 失敗了會怎樣?
        很多都會半途結束, 留下 compiling == 'code' 的問題。 --> all tested, behavior acceptable now
[x] "import re" in peforth.py kernel is not a good choice.
    Simply letting the main program to do that. The main program is eforth.3py 
    --> Yeah! it works.
        c:\Users\hcche\Documents\GitHub\peforth>python eforth.3py
        hello eforth!!
    --> 錯了, 每個 .py 檔都自己 import re, import pdb 反而是對的, see:
        https://stackoverflow.com/questions/8957859/python-child-cannot-use-a-module-the-parent-imported
        ... Generally if you're doing simple obvious things like importing a standard module, 
        you should do it the simple and obvious way......
[x] reproduce the problem:
        import peforth as vm
        vm.dictate('code test end-code') # Try this first
        vm.words['forth']    
    這樣是成功的,但是進入 forth command line 之後, 同樣的工作... 還是成功的。
    --> 改試 vm.dictate('code test3 print("hello test3!!") end-code')
        >>> vm.execute('test3') --> hello test3!!  很成功
    --> 進 forth command line
            >>> vm.peforth()
            OK code test4 print("hello test4") end-code
            OK test4
            hello test4
            OK
        還是很成功
    --> 好像要出過 error e.g. word unknown 之類才能複製問題
        >>> code test5 end-code
          File "<stdin>", line 1
            code test5 end-code
                     ^
        SyntaxError: invalid syntax
        >>>
        的確是這樣!!! now I've got the SRP
    --> 似乎是 w.xt(w) 執行 end-code 時出問題, 檢查此時的 end-code 
        RI, outer() 裡面分辨 token 是否 [int, float] 用 eval(token) 會有 exception
        必須要用 try - except 處理才行。 --> Fixed !!!
[x] why after OK type 'words' no response <--- should be : Error! words unknown.
    --> 結果發現, 所有的 dir(vm) attributes 都這樣!!
        (Pdb) eval('pop') ==> <function pop at 0x00000178A534A730>
        (Pdb) eval('dictionary') ==> [0]
        (Pdb) eval('stack') ==> [{'forth': [0, code, end-code, //, stop, *debug*]}, {'forth': [0, code, end-code, //, stop, *debug*]}, {'forth': [0, code, end-code, //, stop, *debug*]}, <class 'peforth.Word'>, <function phaseA at 0x00000178A534A0D0>, <function phaseB at 0x00000178A534A158>]
        所以, outer() 還要再改良。
    --> eval() 的結果 + 0 就可以保證他是 number 了
[x] kernel project-k.py instead of peforth.py         
[ ] code word's help, not easy, keep the record.
    # stack diagram    
    ntibwas, s = ntib, nextstring("\\(")
    if s['flag']:  # stack diagram is existing
        pdb.set_trace()
        newhelp = '( ' + nexttoken('\\)') + nexttoken() + ' '
    else: # return s to tib
        ntib = ntibwas
    # word description
    ntibwas, s = ntib, nextstring("\\")
    if s['flag']:  # description is existing
        newhelp += nexttoken('\n|\r')
    else: # return s to tib
        ntib = ntibwas
    code \ last().help += nexttoken('\n|\r'); end-code immediate
         // ( <comment> -- ) Give help message to the new word.
    code ( last().help = '( ' + nexttoken('\\)') + nexttoken() + ' ' end-code immediate
         // ( -- ) Get stack diagram to the last's help. 
        
[x] In jeforth, window.colonxt is dynamicly created by definition of ':'.
    Can peforth.f do that too in python? Yes!!!
        >>> def test():
        ...     globals()['cc'] = 123
        ...
        >>> cc
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        NameError: name 'cc' is not defined
        >>> test()
        >>> cc
        123
        >>>
[ ] : test ; 
    'module' object does not support item assignment
    Debug? [y/N] y
    RI: last().xt = xt # also vm['colonxt'] <------ [ ] easy, deal with this later
[x] After the above error probably, after colon definition the compiling is still True!!!
    --> because forgot declare it a global.
    B i n g o ! ! colon definition works now
[x] literal needs to use closure 
    def gen(n): # function generator
        def f(): # literal run time function
            print(n)
        f.description = "{} {}".format(type(n),n)    
        return f
    f = gen([11,22,33])
    f()
    >>> f.description
    "<class 'list'> [11, 22, 33]"
    # functions are not shown by __str__ and __repr__ like dict
    # def str(self):    # return help message
    #     return f.description
    # def repr(self):   # execute xt and return help message
    #     return f.description
    # str.desc = "I am str"    
    # repr.desc = "I am repr"    
    # f.__str__  = str    
    # f.__repr__ = repr
[x] py> py: 都應該改用 compile(code,"")    
    compile CN http://www.th7.cn/Program/Python/201608/923063.shtml
    用到 lambda 就不能用來【賦值】, 安全理由. 故 py: 不能用 lambda. 要的話就必須用 compile 的。
    https://stackoverflow.com/questions/20695745/why-use-lambdas-vs-1-line-function-declarations
    --> [x] 已經發現 py: tick('//').immediate=True 行不通了!!! 
            --> 用 <py> </py> </pyV> 分別改寫了 py: py> , ok now
    [x] pyExec pyEval 是多餘的 --> 去除
[x] (Pdb) execute("sdfsdf")
    (Pdb)
    沒半點錯誤訊息, 有問題看不出來!!
    --> fixed, now it's a panic.
[ ] \ ------------ above are most basic words for developing and for debug ----------------
    py: py> 完成之後, 以下都應該盡量改成 colon words 
[x] compiling 未定義怎麼不觸發 unknown?
    --> outer() 用 eval(token) 想判斷 token 是否 number 不行, 
        當 token='compiling' 時不會觸發 exception 反而傳回其值 True or False !! 
    --> 改用 complex(token) 很完美! 
[ ] t> >t t@ 
    >>> line = 'Cats are smarter than dogs\n\\ 1234\n\\ 2233'
    >>> matchObj = re.search( r'\n\\ (\d*)$', line)
    >>> matchObj.group()
    '\n\\ 2233'
    >>> matchObj.group(1)
    '2233'
    >>> len(matchObj.group())
    7
    >>> line[:-7]
    'Cats are smarter than dogs\n\\ 1234'
    >>>    
[x] [/py] [/pyV] 只分別取得 exec-code 與 eval-code 不執行, 可以用 execute 執行嗎?
    [x] execute 也要能執行 exec-code 或 eval-code ---> done
    [x] 這兩個都不要，應該是個 compyle ( 'source' -- code object ) \ python compiler 指令
[x] 讓 execute() 認得 code object 
    --> OK ' compyle .
        compyle ( "source" -- exec-code ) Python compile source to exec-code object __str__ OK
        OK char print('hi') compyle
        OK execute
        hi
        OK 一次就成功了!!
[x] colon definition 裡看能不能用 comma 塞入一個 code object ?
    --> : test char print('hi') compyle execute ;  成功
        : test2 [ char print('hi') compyle , ] ; 也成功
        : cfa ' py> dictionary[pop().cfa:] . cr ; 
        OK cfa test2
        [ /* test2 */ <code object <module> at 0x0000019B24E1F8A0, file "", line 1>, None,
          /* cfa */ ', <function xt.<locals>.<lambda> at 0x0000019B24E29C80>, ., cr, None,
        None]
        OK
[x] 有了 compyle 要不要改寫 <py> </py> </pyV> 等? 
    --> 只簡化了 </py> 一點點
[x] debug :: --> root cause 又是 branch 裡 assignment to ip 忘了加 vm.ip 
    OK 11 22 ' + :: xt() .s ==> [33] OK 表示 :: interpret mode 功能 ok
    OK : test :: xt() ;
    --Return--
    > <string>(2)xt()->None
    (Pdb) c
    OK see-cfa test
    [<code object <module> at 0x000001F1364F68A0, file "", line 1>, None, None]
    OK 22 33 ' + test
    OK .s
    [55]
    OK    
[x] constant 要用到 vm.forth['varname'] 複習一下 python 語法
    constant 要做的事 --> 'push(vm["forth"]["x"])'
    一開始 word-list 都沒有自己的空間
        (Pdb) vm['forth']
        *** TypeError: 'module' object is not subscriptable  
        (Pdb) vm.forth
        *** AttributeError: module 'projectk' has no attribute 'forth'
    不能這樣 init :
        (Pdb) vm['forth']={}
        *** TypeError: 'module' object does not support item assignment
    要這樣 init :
        (Pdb) setattr(vm,'forth',{})
    Object 的 attribute 不能這樣 access :
        (Pdb) vm['forth']  <--- 這是 dict 的方式
        *** TypeError: 'module' object is not subscriptable
    要這樣 access :
        (Pdb) vm.forth
        {}
        (Pdb) getattr(vm,'forth')
        {}
        (Pdb)    
[x] colon definition 失敗還是會佔一個位置
    OK 123 constant x
    OK 345 to x
    Error! Assigning to a none-value.
    Debug? [y/N]
    OK : test 44445555 to x ;
    Error! Assigning to a none-value. <--- 馬上觸發錯誤,好。
    Debug? [y/N]
    OK words
    0 code end-code // ...snip... to x test  <--- test 佔了位置
    OK : ttt ;
    OK words
    0 code end-code // ...snip... to x test ttt <--- 確實佔了位置
    OK test
    Error! test unknown. <---- colon definition 失敗, 只是沒有 reveal 而已
    Debug? [y/N]
    OK rescan-word-hash <---- rescan 之後它就會出現!!
    OK test
    OK .s
    [44445555]
    OK
    --> jeforth 也一樣, 算了, 有警告就可以了。
    --> (forget) 一下可以把它消除掉
    
[x] tib 平時有被 corrupted
    OK char $ . rewind
    OK 11 22 33 *debug*  # <---- 最簡單的
    (Pdb) tib
    '112233*debug*' # <----- 就已經有問題了 !!!
    (Pdb)
    問題在 kernel nexttoken() 裡面
    --> Root cause 1 : nexttoken() <--- skip leading white spaces 改寫
        Root cause 2 : tib and ntib are strange <-- ntib 太大先排除
[x] writeTextFile  實驗
    OK <py> open("pathname.txt", "wt")</pyV> constant f
    reDef f
    OK f .
    <_io.TextIOWrapper name='pathname.txt' mode='wt' encoding='cp950'> OK f :> name
    --> pathname.txt OK
    OK f :: write("abc")
    OK f :: write("123")
    OK f :: write("中文")
    OK f :: close()
    encoding='utf-8'
[x] refill works now. Use refill to improve <text> first. Let it accept
    multiple lines. ---> 最後是簡單地引進 accept2 用 Ctrl-D 切換 multiple-line mode 即可. 保留以下研究過程。
    : <text>.interpret ( <multi-lines> -- "string" ) // get multi-lines string from ternimal
        CR word ( s )
        begin
            accept if ( s line )  
                \ get string to s, leave </text> and the rests in tib by adjusting ntib
                py> re.search("(.*)</text>(.*)",tos()) ( s line re )
                py> bool(tos()) if  \ line has </text> ? 
                    ( s line re )
                    py: vm.tib="</text>"+tos().group(2);vm.ntib=0;
                    \ s += re.group(1)
                    nip ( s re ) :> group(1) + ( s )
                    exit
                else  ( s line re )
                    \ s += line
                    drop + ( s ) 
            else ( s )
                \ s += '\n'
                py> pop()+'\n'
            then
            refill
        again ;
    我發現, bool(regEx) 可以看出 re.search 的結果是否 found
    [x] See MetaMoji 討論如何適當分割以上複雜的 <text>.interpret 成簡單的 一行成功; 多行輸入 兩段。
        其中多行輸入是個公用 routine
    [x] 實驗後綴法是否有簡化功效? 使 group(1) 成為共同的結果
        \ regular expression 實例
        OK <py> re.search("(.*?)</text>(.*)","aa </text>bb</text>")</pyV> ( re ) constant re
        OK re bool . cr                                   ^^^^^^ 故意加上後綴讓 re.search 總是成功   
        True <--- 總是成功
        OK re :> group() . cr
        aa </text>bb</text>
        OK re :> group(1) . cr
        aa <----------------------------- group(1) 為所求 
        OK re :> group(2) . cr
        bb</text>  <-------------------- group(2) 去掉後綴之後還給 tib 
        OK <py> re.search("(.*?)</text>(.*)","aa bb</text>")</pyV> ( re ) constant re
        OK re bool . cr
        True
        OK re :> group() . cr
        aa bb</text>
        OK re :> group(1) . cr
        aa bb  <------------ 當 bool group(2) False 時 group(1) 仍為所求, 故確有簡化功效
        OK re :> group(2) . cr
        OK re :> group(2)=="" . cr
        True
        OK re :> group(2) bool .
        False OK
    [x] 多行輸入公用 routine
        : accepts ( "deli" <multiple lines> -- "string" ) // Get multiple lines from tib up to delimiter 
            ( deli )
            begin
                accept if ( s line )  
                    \ get string to s, leave </text> and the rests in tib by adjusting ntib
                    py> re.search("(.*)</text>(.*)",tos()) ( s line re )
                    py> bool(tos()) if  \ line has </text> ? 
                        ( s line re )
                        py: vm.tib="</text>"+tos().group(2);vm.ntib=0;
                        \ s += re.group(1)
                        nip ( s re ) :> group(1) + ( s )
                        exit
                    else  ( s line re )
                        \ s += line
                        drop + ( s ) 
                else ( s )
                    \ s += '\n'
                    py> pop()+'\n'
                then
                refill
            again ;
        code accept2 # use Ctrl-D at the end to terminate the input. py> chr(4)=='^D' --> True
            result, s = "", input()
            while not chr(4) in s:
                result += s
                s = input()
            result += s.replace(chr(4),'\n')  # all ^D become \n 
            push(result)
            push(True)
            end-code // ( -- str T|F ) Read a line from terminal.
[x] accept can be single line accept1 or multiple lines accept2 , switch by Ctrl-D
    8: [EOT] (<class 'str'>) <---- the Ctrl-D from input()
    OK py> ord(tos()[0]) . cr
    4
    OK
    
[x] .s in trouble when cell is False, None ... etc
[x] peforth.py 可以直接執行 : python peforth.py 
    也可以由 python interpreter 執行: >>> peforth.main() 此時 exit 回到 python interpreter
    bye 則會傳回 errorlevel 回到 DOS.

    # 從 python interpreter 就可以看到 peforth.py module 裡的 globals
    >>> dir(peforth)
    ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', 
    '__package__', '__spec__', 'greeting', 'main', 'panic', 'readTextFile', 
    'vm', 'writeTextFile']

    # 從 python interpreter 更可以看到 project-k vm 裡的 globals
    >>> dir(peforth.vm)
    ['EXIT', 'RET', 'Word', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', 
    '__name__', '__package__', '__spec__', 'code', 'colonxt', 'comma', 'compiling', 'context', 
    'context_word_list', 'current', 'current_word_list', 'debug', 'dictate', 'dictionary', 
    'dis', 'docode', 'doendcode', 'endcode', 'execute', 'forth', 'genxt', 'greeting', 
    'here', 'inner', 'inspect', 'ip', 'isReDef', 'json', 'last', 'major_version', 'multiple', 
    'name', 'newhelp', 'newname', 'newxt', 'nextstring', 'nexttoken', 'ntib', 'order', 'os', 
    'outer', 'panic', 'pdb', 'phaseA', 'phaseB', 'pop', 'push', 're', 'readTextFile', 'reset', 
    'rstack', 'rtos', 'stack', 'stop', 'tib', 'tick', 'tos', 'version', 'vm', 'vocs', 'wordhash', 
    'words', 'writeTextFile']
    
    # 從 python interpreter 也可以執行 peforth 
    >>> peforth.vm.dictate 
    <function dictate at 0x000001D1368E2510>
    >>> peforth.vm.dictate('version')
    p e f o r t h    v1.01
    source code http://github.com/hcchengithub/peforth

    # 在 peforth 裡面定義的東西, 回到 python interpreter 取用:
    >>> peforth.main()
    OK 123 constant x
    OK exit
    >>> peforth.vm.forth
    {'obj2dict': <function object2dict at 0x000001D136934510>, 'x': 123}
    >>> peforth.vm.forth['x'] --> 123

    # 用 obj2dict() 把 Word 轉成 dict, 這是 see 的準備
    >>> peforth.vm.forth['obj2dict'](peforth.vm.tick('+'))
    {'__class__': 'Word', '__module__': 'projectk', 'name': '+', 'xt': <function xt at 0x000001D1368F28C8>, 'immediate': False, 'help': '( a b -- a+b) Add two numbers or concatenate two strings.', 'comment': '', 'vid': 'forth', 'wid': 51, 'type': 'code'}

[x] see code words

    # json 需要先給它 obj2dict() function 才能處理我們的 object
    OK py> json.dumps(tick('+'),indent=4) .
    Failed to run <Word '</pyV>'>: Object of type 'Word' is not JSON serializable
    Continue, Debug, or Abort? [C/d/a] a          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  

    # 從 peforth 裡面定義轉換 function 
    <py>
    def object2dict(obj):
        #convert object to a dict
        d = {}
        d['__class__'] = obj.__class__.__name__
        d['__module__'] = obj.__module__
        d.update(obj.__dict__)
        return d
    push(object2dict)
    </py>
    ^D
    OK .s
          0: <function object2dict at 0x000001D136934510> (<class 'function'>)
    OK constant obj2dict
    OK exit
    
    # 有了轉換 function 就可以讓 json 完成工作
    >>> import json
    >>> print(json.dumps(peforth.vm.tick('+'),default=peforth.vm.forth['obj2dict'],indent=4))
    {
        "__class__": "Word",
        "__module__": "projectk",
        "name": "+",
        "xt": {
            "__class__": "function",
            "__module__": "projectk",
            "source": "def xt(_me=None): ### + ###\n    push(pop(1)+pop()) \n",
            "name": "+"
        },
        "immediate": false,
        "help": "( a b -- a+b) Add two numbers or concatenate two strings.",
        "comment": "",
        "vid": "forth",
        "wid": 51,
        "type": "code"
    }
    >>>
    
[x] code object 希望能帶 source code 以供 see
    OK 45 @ dir .
    ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', 
    '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', 
    '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', 
    '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'co_argcount', 'co_cellvars', 
    'co_code', 'co_consts', 'co_filename', 'co_firstlineno', 'co_flags', 'co_freevars', 
    'co_kwonlyargcount', 'co_lnotab', 'co_name', 'co_names', 'co_nlocals', 'co_stacksize', 
    'co_varnames'] OK
    OK    --> 不行, code object 裡面不能新增 attribute 也不能改裡面的
    
    若不行, 只好模仿 Word 弄成一個 class 來裝 code object 就可以帶上 source code
    或用 closure , 也就是 genxt() 的方法也是現成已經成功的辦法。也不見得比 compyle 差。
    或用 dis.dis(func) 也好, 更具視覺效果 
    [x] 想到給 code object 加上 source code 顯示的辦法了, 引進 class Comment, 類似 class Word 
        但是 do nothing (由 phaseA phaseB 實現) 只帶著 comment comma(Comment('lalalal')) 進
        dictionary 裡去躺著,等 see command 來利用。

        OK py: comma(Comment("lalala"))
        OK here
        OK .
        637 OK 636 @ .
        lalala OK 636 @ type . --> <class 'projectk.Comment'> 
        OK 636 @ .
        lalala 
        OK 636 @ execute -->
            Failed to run <Word 'execute'>: must be str, not Comment
            Continue, Debug, or Abort? [C/d/a] a
    [x] modify phaseA phaseB to support Comment class
        --> done!
    [x] modify ::, :>, </py>, and </pyV> to add comment
    [x] 目前 literal 仍被當一般 function 用 dis.dis() 顯示 --> 改成顯示 literal 
        OK 339 @ .  # 已知 339 處是個 literal function
        <function xt.<locals>.f.<locals>.literal at 0x000001ED9B6579D8> OK 339 @ :> __name__ .
        OK 339 @ :> str . # 印出 readable 的方法
        Literal: pop(). <class 'str'> OK
        --> 可以修改 toString 了
    ==> see 終於完成了!!!
    