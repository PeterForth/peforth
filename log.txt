
peforth

[x] 13:59 2017-07-31 找到 JavaScript eval() equivalent in Python
	https://stackoverflow.com/questions/701802/how-do-i-execute-a-string-containing-python-code-in-python
	成功了!!
	>>> mycode = 'print ("hello world")'
	>>> exec(mycode)
	hello world
	>>>

	The technique of returning a function from another function is known as currying:
	https://stackoverflow.com/questions/14261474/how-do-i-write-a-function-that-returns-another-function
	
	Python annoymous function lambda
	http://blog.csdn.net/majianfei1023/article/details/45269343
	https://www.zhihu.com/question/20125256
	
[ ] review project-k , should project-k support python too? which will be peforth.py 	

[ ] 直接問 pyforth 的原作者的版權條件 
[x] 實驗用 exec() 生成一個 function
		s = ''' 
		def show(s):
			print(s)
		'''
	exec(s)
	>>> show('abc')
	abc
	>>> 成功了!
	
[ ]	Try to define an python object
	s = '''
	class a():
		vm = None
		def b(self):  # self is must
			print(b)  # b unknown
			print(self)
			print(a)
			vm = self
	c = a()
	'''
	exec(s)
[ ] peforth 可以引用的讀檔範例
    # average5 .py 
    def main() : 
        fileName = input ("What file are the numbers in? " ) 
        infile = open (fileName, ' r ') 
        sum = 0 
        count = 0 
        for line in infile:
            sum = sum + eval (line) 
            count = count + 1 
        print ("\nThe average Of the numbers is", sum / count) 
    main ( ) 

    # average6.py 
    def main() : 
    fileName = input ("What file are the numbers in? " ) 
    infile = open ( fileName 
    sum = 0.0 
    count = 0 
    line = infile.readline()
    while line != "" 
        sum = sum + eval(line) 
        count = count + 1 
        line = infile.readline()
    print("\nThe average Of the numbers is", sum / count) 
    main()

[ ] module 的用法搞懂了，很簡單。 peforth.py 就是 peforth VM.
    不需要像 javascript 用一個 function 把整個 vm 包起來, see 
    GitHub\peforth\projectile.py 
    python can redefine functions and methods. Function and methods are
    variables too.
    python objects, like javascript, can add properties and methods
    through simply assign a value to it.
        >>> type(show)  # show is an object
        <class 'projectile.Projectile'>
        >>> show
        <projectile.Projectile object at 0x000001C6260D0438>
        >>> show.x = 0   # assign new property to show
        >>> show.y = 11
        >>> show.p = 22
        >>> dir(show)    # check it out
        ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', 
        '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', 
        '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', 
        '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', 
        '__str__', '__subclasshook__', '__weakref__', 'getHere', 'getX', 'getY', 'p', 
        'update', 'x', 'xpos', 'xvel', 'y', 'ypos', 'yvel']
        >>>
[ ] python 也可以 see function 的 source code
    https://stackoverflow.com/questions/427453/how-can-i-get-the-source-code-of-a-python-function
    
    def foo(a):
    x = 2 # how about a comment?
    return x + a

    import inspect

    # inspect.getsource(foo)
    # u'def foo(a):\n    x = 2\n    return x + a\n'

    print (inspect.getsource(foo))
    ==> 結果完全成功, 連 comment 也被顯示出來。
    
    同一篇 stackoverflow 介紹的 dis module 也真的可行!
    >>> import dis
    >>> def func(x):
    ...     print(x+1)
    ...
    >>> func(123)
    124
    >>> dis.dis(func)
      2           0 LOAD_GLOBAL              0 (print)
                  2 LOAD_FAST                0 (x)
                  4 LOAD_CONST               1 (1)
                  6 BINARY_ADD
                  8 CALL_FUNCTION            1
                 10 POP_TOP
                 12 LOAD_CONST               0 (None)
                 14 RETURN_VALUE
    >>>    哇! 顯示出 function 的機械碼, 太正點了!! 
    
[x] Python equivalent of:
    Word.prototype.toString = function(){return this.name + " " + this.help}; // every word introduces itself
    --> 有了, 就是去定義 __str__ prototype of the class

    #------- ex2.py ---------------
    class d():
        def __str__(self):
            return "a __str__"
        def __repr__(self):
            return "a __repr__"

    class x():
        name = 'stella'
        feet = 'splender'
    #------------------------------

    >>> import ex2
    >>> x = ex2.x()
    >>> x
    <ex2.x object at 0x00000170D77202B0>  <---- default __repr__ 打印
    >>> print(x)
    <ex2.x object at 0x00000170D77202B0> <---- default __str__ 傳回值

    >>> d = ex2.d()
    >>> d   # <--------- 執行該 obj 時, 打印 __repr__() 的傳回值
    a __repr__         # 應該讓它執行該 word
    >>> print(d)  # <---- obj 本身的傳回值是 __str__() 的傳回值
    a __str__
    >>>    
    
[ ] 進一步刺探未來的 peforth.py kernel module 的特性   
    
    #----------- ex2.py 代表 kernel module ---------------
        import sys
        import pdb

        name = "ex2"
        author = "H.C. Chen"
        vm = sys.modules[__name__]

        class d():
            def __str__(self):
                return "a __str__"
            def __repr__(self):
                return "a __repr__"

        class x():
            name = 'stella'
            feet = 'spender'
            pdb.set_trace()
            def info(self):
                pdb.set_trace() # <------ 從這裡觀察 module 的結構
                current_module = sys.modules[__name__]
    #------ 應用程式代表 peforth.py 主程式 ---------------------------
        import ex2
        import pdb

        x = ex2.x()
        pass
    #-----------------------------------------------------------------

    開始實驗
    ================== RESTART: C:/Users/hcche/Downloads/ex.py ==================
    > c:\users\hcche\downloads\ex2.py(18)x()
    -> def info(self):
    (Pdb) l
     13  	
     14  	class x():
     15  	    name = 'stella'
     16  	    feet = 'spender'
     17  	    pdb.set_trace()
     18  ->	    def info(self):
     19  	        pdb.set_trace()
     20  	        current_module = sys.modules[__name__]
     21  	
    [EOF]
    (Pdb) name
    'stella'
    (Pdb) vm
    <module 'ex2' from 'C:/Users/hcche/Downloads\\ex2.py'>  # 類似 jeforth 可以看到 module 內的 global! 好威!
    (Pdb) vm.name
    'ex2'   # <--------------- 讚
    (Pdb) vm.author
    'H.C. Chen'  # <--------------- 讚讚
    (Pdb) locals()
    {'__module__': 'ex2', '__qualname__': 'x', 'name': 'stella', 'feet': 'spender'}
                        # 這時候的 locals() 是 ex2.x() 之內的 locals
    (Pdb) vm.d         # 好!
    <class 'ex2.d'>
    (Pdb) dd = vm.d()
    (Pdb) dd
    a __repr__
    (Pdb) __name__  # 這是整個 file 也就是 module 的 name, 用 globlas() 看全部, 如下：
    'ex2'
    (Pdb) globals()
    {'__name__': 'ex2', '__doc__': None, '__package__': '', 
    '__loader__': <_frozen_importlib_external.SourceFileLoader object at 0x000001D38DA92710>, 
    '__spec__': ModuleSpec(name='ex2', loader=<_frozen_importlib_external.SourceFileLoader object at 0x000001D38DA92710>, 
    origin='C:/Users/hcche/Downloads\\ex2.py'), 
    '__file__': 'C:/Users/hcche/Downloads\\ex2.py', 
    '__cached__': 'C:/Users/hcche/Downloads\\__pycache__\\ex2.cpython-36.pyc', 
    '__builtins__': {'__name__': 'builtins', 
    '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 
    '__package__': '', 
    '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 
    '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 
    '__build_class__': <built-in function __build_class__>, 
    '__import__': <built-in function __import__>, 
    'abs': <built-in function abs>, 
    'all': <built-in function all>, 
    'any': <built-in function any>, 
    'ascii': <built-in function ascii>, 
    'bin': <built-in function bin>, 
    'callable': <built-in function callable>, 
    'chr': <built-in function chr>, 
    'compile': <built-in function compile>, 
    'delattr': <built-in function delattr>, 
    'dir': <built-in function dir>, 
    'divmod': <built-in function divmod>, 
    'eval': <built-in function eval>, 
    'exec': <built-in function exec>, 
    'format': <built-in function format>, 
    'getattr': <built-in function getattr>, 
    'globals': <built-in function globals>, 
    'hasattr': <built-in function hasattr>, 
    'hash': <built-in function hash>, 
    'hex': <built-in function hex>, 
    'id': <built-in function id>, 
    'input': <built-in function input>, 
    'isinstance': <built-in function isinstance>, 
    'issubclass': <built-in function issubclass>, 
    'iter': <built-in function iter>, 
    'len': <built-in function len>, 
    'locals': <built-in function locals>, 
    'max': <built-in function max>, 
    'min': <built-in function min>, 
    'next': <built-in function next>, 
    'oct': <built-in function oct>, 
    'ord': <built-in function ord>, 
    'pow': <built-in function pow>, 
    'print': <built-in function print>, 
    'repr': <built-in function repr>, 
    'round': <built-in function round>, 
    'setattr': <built-in function setattr>, 
    'sorted': <built-in function sorted>, 
    'sum': <built-in function sum>, 
    'vars': <built-in function vars>, 
    'None': None, 
    'Ellipsis': Ellipsis, 
    'NotImplemented': NotImplemented, 
    'False': False, 
    'True': True, 
    'bool': <class 'bool'>, 
    'memoryview': <class 'memoryview'>, 
    'bytearray': <class 'bytearray'>, 
    'bytes': <class 'bytes'>, 
    'classmethod': <class 'classmethod'>, 
    'complex': <class 'complex'>, 
    'dict': <class 'dict'>, 
    'enumerate': <class 'enumerate'>, 
    'filter': <class 'filter'>, 
    'float': <class 'float'>, 
    'frozenset': <class 'frozenset'>, 
    'property': <class 'property'>, 
    'int': <class 'int'>, 
    'list': <class 'list'>, 
    'map': <class 'map'>, 
    'object': <class 'object'>, 
    'range': <class 'range'>, 
    'reversed': <class 'reversed'>, 
    'set': <class 'set'>, 
    'slice': <class 'slice'>, 
    'staticmethod': <class 'staticmethod'>, 
    'str': <class 'str'>, 
    'super': <class 'super'>, 
    'tuple': <class 'tuple'>, 
    'type': <class 'type'>, 
    'zip': <class 'zip'>, 
    '__debug__': True, 
    'BaseException': <class 'BaseException'>, 
    'Exception': <class 'Exception'>, 
    'TypeError': <class 'TypeError'>, 
    'StopAsyncIteration': <class 'StopAsyncIteration'>, 
    'StopIteration': <class 'StopIteration'>, 
    'GeneratorExit': <class 'GeneratorExit'>, 
    'SystemExit': <class 'SystemExit'>, 
    'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 
    'ImportError': <class 'ImportError'>, 
    'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 
    'OSError': <class 'OSError'>, 
    'EnvironmentError': <class 'OSError'>, 
    'IOError': <class 'OSError'>, 
    'WindowsError': <class 'OSError'>, 
    'EOFError': <class 'EOFError'>, 
    'RuntimeError': <class 'RuntimeError'>, 
    'RecursionError': <class 'RecursionError'>, 
    'NotImplementedError': <class 'NotImplementedError'>, 
    'NameError': <class 'NameError'>, 
    'UnboundLocalError': <class 'UnboundLocalError'>, 
    'AttributeError': <class 'AttributeError'>, 
    'SyntaxError': <class 'SyntaxError'>, 
    'IndentationError': <class 'IndentationError'>, 
    'TabError': <class 'TabError'>, 
    'LookupError': <class 'LookupError'>, 
    'IndexError': <class 'IndexError'>, 
    'KeyError': <class 'KeyError'>, 
    'ValueError': <class 'ValueError'>, 
    'UnicodeError': <class 'UnicodeError'>, 
    'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 
    'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 
    'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 
    'AssertionError': <class 'AssertionError'>, 
    'ArithmeticError': <class 'ArithmeticError'>, 
    'FloatingPointError': <class 'FloatingPointError'>, 
    'OverflowError': <class 'OverflowError'>, 
    'ZeroDivisionError': <class 'ZeroDivisionError'>, 
    'SystemError': <class 'SystemError'>, 
    'ReferenceError': <class 'ReferenceError'>, 
    'BufferError': <class 'BufferError'>, 
    'MemoryError': <class 'MemoryError'>, 
    'Warning': <class 'Warning'>, 
    'UserWarning': <class 'UserWarning'>, 
    'DeprecationWarning': <class 'DeprecationWarning'>, 
    'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 
    'SyntaxWarning': <class 'SyntaxWarning'>, 
    'RuntimeWarning': <class 'RuntimeWarning'>, 
    'FutureWarning': <class 'FutureWarning'>, 
    'ImportWarning': <class 'ImportWarning'>, 
    'UnicodeWarning': <class 'UnicodeWarning'>, 
    'BytesWarning': <class 'BytesWarning'>, 
    'ResourceWarning': <class 'ResourceWarning'>, 
    'ConnectionError': <class 'ConnectionError'>, 
    'BlockingIOError': <class 'BlockingIOError'>, 
    'BrokenPipeError': <class 'BrokenPipeError'>, 
    'ChildProcessError': <class 'ChildProcessError'>, 
    'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 
    'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 
    'ConnectionResetError': <class 'ConnectionResetError'>, 
    'FileExistsError': <class 'FileExistsError'>, 
    'FileNotFoundError': <class 'FileNotFoundError'>, 
    'IsADirectoryError': <class 'IsADirectoryError'>, 
    'NotADirectoryError': <class 'NotADirectoryError'>, 
    'InterruptedError': <class 'InterruptedError'>, 
    'PermissionError': <class 'PermissionError'>, 
    'ProcessLookupError': <class 'ProcessLookupError'>, 
    'TimeoutError': <class 'TimeoutError'>, 
    'open': <built-in function open>, 
    'quit': Use quit() or Ctrl-Z plus Return to exit, 
    'exit': Use exit() or Ctrl-Z plus Return to exit, 
    'copyright': Copyright (c) 2001-2016 Python Software Foundation.
    All Rights Reserved.
    Copyright (c) 2000 BeOpen.com.
    All Rights Reserved.
    Copyright (c) 1995-2001 Corporation for National Research Initiatives.
    All Rights Reserved.
    Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
    All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
        for supporting Python development.  See www.python.org for more information., 
        'license': Type license() to see the full license text, 
        'help': Type help() for interactive help, or help(object) for help about object.}, 
        'sys': <module 'sys' (built-in)>, 
        'pdb': <module 'pdb' from 'C:\\Users\\hcche\\AppData\\Local\\Programs\\Python\\Python36\\lib\\pdb.py'>, 
        'name': 'ex2', 
        'author': 'H.C. Chen', 
        'vm': <module 'ex2' from 'C:/Users/hcche/Downloads\\ex2.py'>, 
        'd': <class 'ex2.d'>}
    (Pdb)     